// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Lamber {
  Future<void> unzip({required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnzipConstMeta;

  Future<int> createLocalServer(
      {required String path, required int port, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLocalServerConstMeta;

  Future<void> startLocalServer({required int pointer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartLocalServerConstMeta;

  Future<void> stopLocalServer({required int pointer, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopLocalServerConstMeta;
}

class LamberImpl extends FlutterRustBridgeBase<LamberWire> implements Lamber {
  factory LamberImpl(ffi.DynamicLibrary dylib) =>
      LamberImpl.raw(LamberWire(dylib));

  LamberImpl.raw(LamberWire inner) : super(inner);

  Future<void> unzip({required String path, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_unzip(port_, _api2wire_String(path)),
        parseSuccessData: _wire2api_unit,
        constMeta: kUnzipConstMeta,
        argValues: [path],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kUnzipConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unzip",
        argNames: ["path"],
      );

  Future<int> createLocalServer(
          {required String path, required int port, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_local_server(
            port_, _api2wire_String(path), _api2wire_u16(port)),
        parseSuccessData: _wire2api_usize,
        constMeta: kCreateLocalServerConstMeta,
        argValues: [path, port],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateLocalServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_local_server",
        argNames: ["path", "port"],
      );

  Future<void> startLocalServer({required int pointer, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_start_local_server(port_, _api2wire_usize(pointer)),
        parseSuccessData: _wire2api_unit,
        constMeta: kStartLocalServerConstMeta,
        argValues: [pointer],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kStartLocalServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_local_server",
        argNames: ["pointer"],
      );

  Future<void> stopLocalServer({required int pointer, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_stop_local_server(port_, _api2wire_usize(pointer)),
        parseSuccessData: _wire2api_unit,
        constMeta: kStopLocalServerConstMeta,
        argValues: [pointer],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kStopLocalServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_local_server",
        argNames: ["pointer"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u16(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_usize(int raw) {
    return raw;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
void _wire2api_unit(dynamic raw) {
  return;
}

int _wire2api_usize(dynamic raw) {
  return raw as int;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class LamberWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LamberWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LamberWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_unzip(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_unzip(
      port_,
      path,
    );
  }

  late final _wire_unzipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_unzip');
  late final _wire_unzip = _wire_unzipPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_local_server(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    int port,
  ) {
    return _wire_create_local_server(
      port_,
      path,
      port,
    );
  }

  late final _wire_create_local_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint16)>>('wire_create_local_server');
  late final _wire_create_local_server = _wire_create_local_serverPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_start_local_server(
    int port_,
    int pointer,
  ) {
    return _wire_start_local_server(
      port_,
      pointer,
    );
  }

  late final _wire_start_local_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, uintptr_t)>>(
          'wire_start_local_server');
  late final _wire_start_local_server =
      _wire_start_local_serverPtr.asFunction<void Function(int, int)>();

  void wire_stop_local_server(
    int port_,
    int pointer,
  ) {
    return _wire_stop_local_server(
      port_,
      pointer,
    );
  }

  late final _wire_stop_local_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, uintptr_t)>>(
          'wire_stop_local_server');
  late final _wire_stop_local_server =
      _wire_stop_local_serverPtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef uintptr_t = ffi.UnsignedLong;
typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
